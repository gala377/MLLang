@EXPECTED
Hello
How are you?
1
None
0
0
1
2
3
1
2
3
6
2
3
4
[11, 12, 13, ]
[0, 1, 2, 3, ]
1
2
true
1
8
[(0, a, ), (1, b, ), (2, c, ), (3, d, ), ]
false
[(a, 1, ), (b, 2, ), (c, 3, ), (d, 4, ), ]
false
true
@gensym[3]
false
true
false
30
not yet called
111
Hello world?
1
@SOURCE

let a = 1
scope:
  let a = 10
  io.print "Hello"
  io.print "How are you?"

io.print (conv.toString a)

let b = scope:
  let a = 10

io.print b

; works in functions
fn useScope:
  let a = 10
  scope:
    a = 0
    let c = 1
  io.print a
  ; io.print c - runtime error, c undefined
useScope!

; btw last example can be rewritten
scope:
  let a = 20
  scope:
    a = 0
    let c = 1
  io.print a

let beg = scope
let end = none

; who wants some pascal?
beg:
  io.print 1
  io.print 2
  io.print 3
end


foreach [1, 2, 3] do |x| -> io.print x


io.print (sum [1, 2, 3])

foreach (map [1, 2, 3] (add 1)) io.print

io.print (map [1, 2, 3] do |x|:
  add 10 x)

fn cond pred pos neg:
  if cond:
    pos!
  else:
    neg!


io.print (filter [0, 1, 2, 3, 4, 5, 6] (flip lt? 4))

let fromListRec = conv.toRecord ((`a, 1), (`b, 2))
io.print fromListRec.a
io.print fromListRec.b

io.print (eq? `somesym (conv.toSymbol "somesym"))

io.print (min [3, 4, 5, 8, 6, 1])
io.print (max [3, 4, 5, 8, 6, 1])

io.print (enumerate [`a, `b, `c, `d])

io.print (neq? 1 1)

io.print (zip [`a, `b, `c, `d] [1, 2, 3, 4])

io.print (eq? gensym! gensym!)
let gs = gensym!
io.print (eq? gs gs)
io.print gs
io.print (eq? gs (conv.toSymbol "@gesym[3]"))


let Car = struct.new (`brand, `prodYear) do this -> {
  fn lastMillenia? = lt? this.prodYear 2000,
}

let mycar = Car.new {brand: `toyota, prodYear: 1996}
io.print mycar.lastMillenia?!
mycar.prodYear = 2001
io.print mycar.lastMillenia?!

io.print (apply add (10, 20))
let suspendedAdd = lazyapp add (50, 61)
io.print "not yet called"
io.print suspendedAdd!

let partialApp = apply io.printf ("Hello %s",)
partialApp `world?

map [
  int? 1,
  list? [],
  tuple? (),
  seq? (),
  string? "",
  symbol? `s,
  function? function?,
  float? 1.,
  bool? true,
  record? {},
] do v -> assert v "predicate failed"


assert (seq.eq? [1, 2, 3] (1, 2, 3)) "seq.equal fails"
assert (not (seq.eq? [1, 2, 3] (3, 2, 1))) "not seq.equal fails"

assert (seq.eq? (records.keys {a: 1, b: 2, c: 3}) (`a, `b, `c)) "record keys failed"
assert (seq.eq? (records.vals {a: 1, b: 2, c: 3}) (1, 2, 3)) "record values failed"

seq.foreach [1, 2, 3] do x:
  if eq? x 2:
    return `break
  io.print x

let res = seq.foreach [1, 2, 3] do x:
 if eq? x 2:
   return (`break, `found)
assert (eq? res `found) 'seq.foreach returned wrong value'

assert (seq.and [true, true, true]) "seq.and fails"
assert (not (seq.and [true, true, false, true])) "not seq.and fails"
assert (seq.or [false, true, false]) "seq.or fails"
assert (not (seq.or [false, false, false, false])) "not seq.or fails"

assert (seq.eq? (seq.concat [[1, 2], [3], [4, 5]]) [1,2,3,4,5]) "seq.concat fails"

assert (int? (add 1 1)) none
assert (float? (add 1. 1.)) none
assert (float? (mul 1. 1)) none
assert (int? (div 3 2)) none
assert (float? (div 3 2.)) none