@EXPECTED
got 1
not this one
Got 1 and something
I expect to see this one
hello
calling exit
exit1
exit2
[1, 2, 3, 4, 5, 6, 7, 8, 9]
typeerr
@SOURCE

let collect = iter.collect
let numbers = iter.numbers
let match = cf.match
let pattern = cf.pattern
let condition = cf.condition
let check = cf.check
let any = cf.any
let default = cf.default

let ns = collect [] $ iter.take 3 $ iter.skip 3 $ numbers
assert (seq.eq? ns [3, 4, 5]) "Collections arent equal"

fn testMatch a:
  match a:
    pattern 1 do x:
      io.print "got 1"
    pattern (1, any) do a b:
      io.print "Got 1 and something"
    pattern any do x:
      io.print "not this one"

testMatch 1
testMatch (1, 2, 3)
testMatch (1, `anything)


condition:
  check (eq? 1 2):
    io.print "Not really"
  check true:
    io.print "I expect to see this one"
  default:
    io.print "do not want to see this one"

fn testexitblock exit:
  io.print "hello"
  (do exit:
    io.print "calling exit"
    exit `hello
    io.print "this will be skipped") exit
  io.print "this as well"

assert (eq? (exitblock testexitblock) `hello) "exitblock failed"

; nested exits
let nestedexit = do -> exitblock do exit1:
  io.print "exit1"
  exitblock do exit2:
    io.print "exit2"
    exit1 1
    io.print "after exit2"
  io.print "after exit 1"


assert (eq? nestedexit! 1) "exitblock failed"

fn concat xs = collect [] $ iter.chain xs
io.print $ concat [[1, 2, 3], [4, 5], [6, 7, 8], [9]]

handle:
  conv.toBool do x -> x
with error err if kind? RuntimeErr:
  io.print "This should not happen"
with error err if kind? TypeErr:
  io.print "typeerr"
  assert (err.msg :eq? "cannot convert to bool") "error msg mismatched"