@EXPECTED
hello
hello
I am handling None
indirection
Before some
indirection
Before some
no direction
@SOURCE

effect None

; handler that performs no effects does not execute withs
handle:
  io.print "hello"
with None v:
  io.print "Hello again"

; handler return values
let a = handle:
  "should return"
with None a:
  "should not return"

assert (eq? a "should return") "effect assertion failed"

; returns return from handler not from function
fn inFunction:
  let a = handle:
    return 1
  with None _:
    return 2
  add a 100
assert (eq? inFunction! 101) "function returned wrong value"

effect Some

; handler that performs no effects does not execute withs
handle:
  io.print "hello"
  None none
  io.print "hello again"
with None v:
  io.print "I am handling None"
with Some v:
  io.print "I am handling Some"


; returns return from handler not from function
fn inFunction2:
  let a = handle:
    return None none
  with None _:
    return 2
  add a 100
assert (eq? inFunction2! 102) "function returned wrong value"



fn nothing = None none
fn some a = Some a

fn nestedHandlers:
  fn indirection:
    io.print "Before some"
    handle:
      some 10
    with None _:
      io.print "in None handler"
    io.print "After nothing"

  handle:
    io.print "indirection"
    indirection!
    io.print "no direction"
  with Some val:
    add val 100

assert (eq? nestedHandlers! 110) "nested handlers failed"


fn nestedHandlers2:
  fn indirection:
    io.print "Before some"
    handle:
      some 10
    with Some a:
      add a 10

  handle:
    io.print "indirection"
    let a = indirection!
    io.print "no direction"
    a
  with Some val:
    add val 100

assert (eq? nestedHandlers2! 20) "nested handlers 2 failed"