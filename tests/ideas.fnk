@EXPECTED
Hello
How are you?
1
None
0
0
1
2
3
1
2
3
6
2
3
4
[11, 12, 13, ]
[0, 1, 2, 3, ]
@SOURCE
; we can have scope blocks with lambdas :)

fn scope s = s!

val a = 1
scope:
  val a = 10
  print "Hello"
  print "How are you?"

print (toString a)

val b = scope:
  val a = 10

print b

; works in functions
fn useScope:
  val a = 10
  scope:
    a = 0
    val c = 1
  print a
  ; print c - runtime error, c undefined
useScope!

; btw last example can be rewritten
scope:
  val a = 20
  scope:
    a = 0
    val c = 1
  print a

val beg = scope
val end = b ; equals to None

; who wants some pascal?
beg:
  print 1
  print 2
  print 3
end


fn foreach seq body:
  val i = 0
  val len = length seq
  while lessThan? i len:
    body (get seq i)
    i = add i 1

foreach [1, 2, 3] do |x| -> print x

fn fold seq init body:
  foreach seq do |x|:
    init = body init x
  init

fn sum seq = fold seq 0 add

print (sum [1, 2, 3])

fn map seq body = fold seq [] do |acc x| -> append acc (body x)

foreach (map [1, 2, 3] (add 1)) do |x| -> print x
val res = map [1, 2, 3] do |x|:
  add 10 x
print res

fn filter seq pred:
  fold seq [] do |acc x|:
    if pred x:
      append acc x
    acc

fn flip f a b = f b a

print (filter [0, 1, 2, 3, 4, 5, 6] (flip lessThan? 4))