@EXPECTED
36
Jack
5
true
5
not even an age
true
@SOURCE
; classes like in js
fn Person name age = {
  getAge: do -> age,
  setAge: do |new|:
    age = new,
  fullInfo: do -> name,
}

let jack = Person "Jack" 36
io.print jack.getAge!
io.print jack.fullInfo!
jack.setAge 5
io.print jack.getAge!


fn newtype fields methods:
  let typeid = gensym!
  
  let constr = do vals:
    let passedKeys = map vals fst
    
    foreach fields do field:
      if none? (seq.find passedKeys (eq? field)):
        panic "Not every field has been passed to type constructor"
    foreach vals do fpair:
      if none? (seq.find fields (eq? (fst fpair))):
        panic "Uknown field passed to type constructor"
    
    let this = seq.append vals (`__type__, typeid)
    fold (methods this) this do |this meth|:
      seq.append this (fst meth, snd meth)
    this
  
  {
    new: constr,
    typeid: typeid,
  }

let Student = newtype (`age, `name, `surname, `score) do this -> {
  getAge: do -> this.age,
  setAge: do age:
    this.age = age,
  passes?: do -> lt? 50 this.score,
}

let frank = Student.new {
  name: "Frank",
  surname: "Herbert",
  age: 40,
  score: 51,
}


io.print frank.passes?!
frank.setAge 5

io.print frank.age
frank.age = "not even an age"
io.print frank.getAge!

; runtime error: not every field
; let frank2 = Student.new {
;   surname: "Herbert",
;   age: 40,
;   score: 51,
; }

; runtime error: uknown field
; let frank3 = Student.new {
;   name: "Frank",
;   surname: "Herbert",
;   age: 40,
;   score: 51,
;   middleName: "John",
; }

fn istype? v cons = eq? v.__type__ cons.typeid

io.print (istype? frank Student)