; get filter nonempty strings
assert (seq.eq? (filter ["", "frank", "", "", "goerge"] conv.toBool) ["frank", "goerge"]) "filtering empty strings fails"

effect Yield

fn yield a = Yield a

scope:
  fn iterate s = do -> foreach s yield

  fn collect acc it:
    handle:
      it!
    with Yield val -> resume:
      seq.append acc val
      collect acc do -> resume none
    acc

  fn map it body:
    do:
      handle:
        it!
      with Yield val -> resume:
        yield (body val)
        call $ map (do -> resume none) body

  fn enumerate it:
    fn loop c it:
      handle:
        it!
      with Yield val -> resume:
        yield (c, val)
        loop (inc c) do -> resume none
    do -> loop 0 it

  fn filter it pred = do:
    handle:
      it!
    with Yield val -> resume:
      if pred val:
        yield val
      call $ filter (do -> resume none) pred

  fn zip it1 it2:
    let callIt1 = none
    let callIt2 = none

    callIt1 = do it1 it2:
      handle:
        it1!
      with Yield a -> resume:
        callIt2 (do -> resume none) it2 a

    callIt2 = do it1 it2 val:
      handle:
        it2!
      with Yield a -> resume:
        yield (val, a)
        callIt1 it1 do -> resume none

    do -> callIt1 it1 it2

  let xs = iterate $ seq.range 10
  let i1 = enumerate $ map xs do a -> mul a a
  let it = filter i1 do arg -> zero? (mod (fst arg) 2)

  let coll = collect [] it
  assert (seq.eq? coll [(0, 0), (2, 4), (4, 16), (6, 36), (8, 64)]) "Effect iterators failed"
  coll = collect [] $ zip (iterate (`a, `b, `c)) (iterate (1, 2, 3))
  assert (seq.eq? coll [(`a, 1), (`b, 2), (`c, 3)]) "coll mismatch"

effect ExecCond

scope:
  fn condition body:
    let executed = false
    let ret = handle:
      body!
    with ExecCond f:
      executed = true
      f!
    if not executed:
      panic "no matching arm"
    assert (eq? ret "Hello") "hello failed"

  fn case pred body:
    if pred:
      ExecCond body

  fn default body = ExecCond body

  condition:
    case (eq? 1 2):
      io.print "does not execute"
    case (eq? "a" 1):
      io.print "nope"
    default:
      "Hello"

effect ExecMatch

scope:
  fn matchPattern pat val:
    if not $ function? pat:
      pat = if not $ seq? pat:
        let eqPattern = do v a:
          if eq? a v:
            return (v,)
        eqPattern pat
      else:
        let seqPattern = do patterns a:
          if not $ eq? (seq.len patterns) (seq.len a):
            return none
          let ret = map (zip patterns a) $ apply matchPattern
          if seq.or $ map ret none?:
            return none
          seq.concat ret
        seqPattern pat
    pat val

  fn match arg body:
    handle:
      body!
    with ExecMatch req -> resume:
      let pat = fst req
      let cbody = snd req
      let mres = matchPattern pat arg
      if none? mres:
        match arg do -> resume none
      else:
        if neq? (seq.len mres) $ inspect.arity cbody:
          panic "Arity mismatched"
        apply cbody mres

  fn case patf body = ExecMatch (patf, body)

  fn any a = (a,)

  match (1, "cokolwiek"):
    case 1 do i:
      io.printf "matched integer %v" i
    case 2 do i:
      io.printf "matched integer %v" i
    case (1, any) do |a b|:
      io.printf "matched one and %v" b
    case (any, any) do |a b|:
      io.printf "matched any 2 element sequence %v" (a, b)
    case any do a:
      io.printf "It matched in catch all %v" a
