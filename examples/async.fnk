
let Queue = scope:
  fn new = {
    size: 0,
    beg: none,
    end: none,
  }

  fn empty? q = zero? q.size

  fn pop q:
    if none? q.beg:
      panic "First on empty queue"
    let ret = q.beg.val
    q.beg = q.beg.next
    q.size = dec q.size
    ret

  fn push q val:
    let node = {val, next: none}
    if empty? q:
      q.size = inc q.size
      q.beg = node
      q.end = node
    else:
      q.size = inc q.size
      q.end.next = node
      q.end = node

  fn fromSeq s:
    let q = new!
    foreach s $ push q
    return q

  {
    ; create an empty queue
    ; type :: {Queue}
    new,
    ; Chech if a queue is empty
    ; type :: {Queue -> bool}
    empty?,
    ; Remove the first item from a queue
    ; and return it
    ; type :: a => {Queue a -> a}
    pop,
    ; Push an item to the end of a queue
    ; type :: a => {Queue a -> a -> none}
    push,
    ; Create a new queue from a sequence.
    ; type :: a => {Seq a -> Queue a}
    fromSeq,
  }

let coro = scope:
  effect yield
  effect spawn

  fn delay seconds:
    let now = time.now!
    while true:
      coro.yield none
      let diff = sub time.now! now
      if lt? seconds diff:
        return

  fn task f:
    let future = none
    coro.spawn:
      let res = f!
      future = { res }

    fn awaiter:
      while none? future:
        coro.yield none
      future.res

    awaiter

  {
    ; yield from coroutine allowing another task to be run
    ; type :: {none -> none}
    yield,
    ; spawn another coroutine onto a task queue
    ; type :: {{ none -> none } -> none}
    spawn,
    ; resume coroutine after `seconds` seconds
    ; type :: {float -> none}
    delay,
    ; spawn task onto a task queue but allow to
    ; retrieve the task's result bu calling
    ; returned `awaiter` function which will yield
    ; until result is available
    ; type :: a => {{none -> a} -> {a}}
    task,
  }

; Run asynchronous tasks in the task queue until
; none are left.
; type :: {Queue { none -> none } -> none}
fn simpleExecutor tasks:
  let push = Queue.push tasks
  let pop = do -> Queue.pop tasks
  while not $ Queue.empty? tasks:
    handle:
      (pop!)!
    with coro.yield _ -> k:
      push do -> k none
    with coro.spawn t -> k:
      push t
      resume k


scope:
  let tasks = Queue.fromSeq [
    do:
      io.print "First task"
      coro.yield none
      io.print "First task continued"
      io.print "This one is not interrupted"
      coro.yield none
      io.print "FT: I think I'll go home now",

    do:
      io.print "Second task"
      io.print "I dont think I'll yield yet"
      coro.yield none
      foreach (seq.range 3) do x:
        io.printf "Second spawning taks %v" x
        coro.spawn:
          io.printf "I am task number %v" x
          coro.delay $ 5 :add x
          io.printf "Spawned task %v reporting from duty" x
      io.print "Second task, I've done my job boss",

    do:
      io.print "Third task"

      let t = coro.task:
        io.print "I was spawned by a third task"
        io.print "I need to do some heavy computation"
        coro.delay 6
        io.print "My heavy computation has been completed"
        io.print "I'll return the result"
        42

      io.print "3rd task. Spawned my heavy comp in the background"
      io.print "I'll sleep for now and then check if it's done"
      coro.delay 5
      io.print "3rd task I am awake now, I'll wait for my computation"
      assert (t! :eq? 42) "Wrong answer"
      io.printf "My answer is %s" t!
      io.print "I got my answer so goodbye for now",
  ]
  simpleExecutor tasks
