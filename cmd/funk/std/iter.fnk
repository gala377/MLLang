
let iter = (do:
  effect Yield

  fn iterate s = do:
    let len = seq.len s
    let i = 0
    while lt? i len:
      Yield $ seq.get s i
      i = inc i

  fn toIter it:
    if seq? it:
      return iterate it
    it

  fn collect acc it:
    handle:
      it!
    with Yield val -> k:
      seq.append acc val
      resume k
    acc

  fn map it body:
    it = toIter it
    do:
      handle:
        it!
      with Yield val -> k:
        Yield (body val)
        resume k

  fn enumerate it = do:
    it = toIter it
    let curr = 0
    handle:
      it!
    with Yield val -> k:
      Yield (curr, val)
      curr = inc curr
      resume k

  fn filter it pred = do:
    it = toIter it
    handle:
      it!
    with Yield val -> k:
      if pred val:
        Yield val
      resume k

  fn zip it1 it2:
    it1 = toIter it1
    it2 = toIter it2
    let callIt1 = none
    let callIt2 = none

    callIt1 = do it1 it2:
      handle:
        it1!
      with Yield a -> resumek:
        callIt2 (do -> resumek none) it2 a

    callIt2 = do it1 it2 val:
      handle:
        it2!
      with Yield a -> resumek:
        Yield (val, a)
        callIt1 it1 do -> resumek none

    do -> callIt1 it1 it2

  fn take n it = do:
    it = toIter it
    handle:
      it!
    with Yield a -> k:
      if zero? n:
        return none
      Yield a
      n = dec n
      resume k

  fn numbers:
    let v = 0
    while true:
      Yield v
      v = inc v

  fn skip n it = do:
    it = toIter it
    handle:
     it!
    with Yield a -> k:
      if zero? n:
        Yield a
      else:
        n = dec n
      resume k

  fn inspect body it = do:
    it = toIter it
    handle:
      it!
    with Yield a -> k:
      body a
      Yield a
      resume k

  fn foreach it body:
    it = toIter it
    handle:
      it!
    with Yield a -> k:
      body a
      resume k

  fn fold it init body:
    it = toIter it
    handle:
      it!
    with Yield a -> k:
      init = body init a
      resume k
    init

  fn chain its = do -> foreach its do it -> (toIter it)!

  {
    Yield, iterate, numbers,

    map, enumerate, filter, zip,
    take, skip, inspect, chain,

    collect, foreach, fold,
  })!