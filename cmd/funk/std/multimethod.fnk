let methods = module:
  let registered_methods = []

  fn new selector:
    let arity = inspect.arity selector
    if zero? arity:
      throw ValueErr "Multimethod's arity cannot be 0"

    let implementations = []

    fn callWithArgs args:
      let key = apply selector args
      let f = seq.find implementations do el -> eq? key (fst el)
      if none? f:
        throw RuntimeErr "no multimethod instance found"
      apply (snd f) args

    fn createNextCall args:
      do arg:
        seq.append args arg
        if eq? (seq.len args) arity:
          return callWithArgs args
        createNextCall args

    fn firstCall arg:
      let args = [arg]
      if eq? arity 1:
        return callWithArgs args
      createNextCall args

    fn instance v m:
      ; we assign so that call to instance will
      ; always return `none` and we will not leak
      ; methods list
      let _ = seq.append implementations (v, m)

    seq.append registered_methods {
      key: firstCall,
      instance,
      arity,
    }
    return firstCall

  fn impl meth key body:
    let m = seq.find registered_methods do m -> eq? meth (m.key)
    if none? m:
      throw TypeErr "not a multimethod"
    if neq? m.arity (inspect.arity body):
      throw TypeErr "method's body arity does not match"
    m.instance key body

  export {new, impl}