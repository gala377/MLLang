
extend seq {
  ; Searchers sequence based on predicate.
  ; Returns first element matching the predicate.
  ; Returns "none" value if no element matched the predicate.
  fn find s pred = exitblock do exit:
    foreach s do el:
      if pred el:
        exit el,

  fn empty? s = eq? (seq.len s) 0,

  fn notempty? s = not (seq.empty? s),

  ; needs to be anonymous so it does not recurse on itself
  ; when trying to call eq? from prelude
  eq?: do a b:
    if not (eq? (seq.len a) (seq.len b)):
      return false
    exitblock do exit:
      foreach (zip a b) do |vals|:
        if not (eq? (fst vals) (snd vals)):
          exit false
      true,

  fn and s = exitblock do exit:
    foreach s do v:
      if not v:
        exit false
    true,

  fn or s = exitblock do exit:
    foreach s do v:
      if v:
        exit true
    false,

  ; Accepts a sequence of sequences and
  ; joins them together.
  fn concat seqs = iter.collect [] $ iter.chain seqs,

  ; Creates a list of numbers from 0 to end-1.
  ; For lazy version look at iter.numbers.
  fn range end:
    let acc = []
    let i = 0
    while lt? i end:
      seq.append acc i
      i = inc i
    acc,

}