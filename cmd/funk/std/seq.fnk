
extend seq {
  fn find s pred:
    let res = filter s pred
    if seq.empty? res:
      none
    else:
      fst res,

  fn empty? s = eq? (seq.len s) 0,

  fn notempty? s = not (seq.empty? s),

  fn eq? a b:
    if not (eq? (seq.len a) (seq.len b)):
      false
    else:
      fold (zip a b) true do |acc v|:
        if not acc:
          false
        else:
          eq? (fst v) (snd v)
}