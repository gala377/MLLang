
let struct = scope:
  let new = do fields methods:
    let typeid = gensym!

    let constr = do vals:
      let passedKeys = map vals fst

      foreach fields do field:
        if none? (seq.find passedKeys (eq? field)):
          panic "Not every field has been passed to type constructor"
      foreach vals do fpair:
        if none? (seq.find fields (eq? (fst fpair))):
          panic "Unknown field passed to type constructor"

      let this = scope:
        let this = vals {__type__: typeid}
        ; we need to use `extend` here because methods
        ; captured the reference to the record so
        ; we need modify `this` in place instead of
        ; copying with record update syntax
        extend this (methods this)
      this

    {
      new: constr,
      typeid,
    }

  {
    new,
    fn istype? t v = eq? t.typeid v.__type__,
  }