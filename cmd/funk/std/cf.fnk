effect Yield


let cf = scope:
  ; local effects so that they can only be handled by
  ; match and case handlers and cannot be intercepted
  ; by user handlers
  effect CF_CheckMatch
  effect CF_CheckCond

  ; match and patterns
  fn matchPattern pat val:
    if not $ function? pat:
      pat = if not $ seq? pat:
        let eqPattern = do v a:
          if eq? a v:
            return (v,)
        eqPattern pat
      else:
        let seqPattern = do patterns a:
          if not $ eq? (seq.len patterns) (seq.len a):
            return none
          let ret = map (zip patterns a) $ apply matchPattern
          if seq.or $ map ret none?:
            return none
          seq.concat ret
        seqPattern pat
    pat val

  fn match arg body:
    handle:
      body!
    with CF_CheckMatch req -> k:
      let pat = fst req
      let cbody = snd req
      let mres = matchPattern pat arg
      if none? mres:
        resume k
      else:
        if neq? (seq.len mres) $ inspect.arity cbody:
          throw TypeErr "Arity mismatched"
        apply cbody mres

  fn any a = (a,)

  fn pattern patf body = CF_CheckMatch (patf, body)

  ; condition
  fn condition body:
    let executed = false
    let ret = handle:
      body!
    with CF_CheckCond f:
      executed = true
      f!
    if not executed:
      throw RuntimeErr "no matching condition arm"
    ret

  fn check pred body:
    if pred:
      CF_CheckCond body

  fn default body = ExecCond body

  {
    ; match and patterns
    match, pattern, any,
    ; condition
    condition, check, default,
  }

